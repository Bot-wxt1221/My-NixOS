From 01e83a3e65971a4e56bf697e284b2dd024e021b7 Mon Sep 17 00:00:00 2001
From: wxt <3264117476@qq.com>
Date: Sat, 16 Aug 2025 18:26:36 +0800
Subject: [PATCH] feat: handle virtual keyboard by ourself

---
 Cargo.toml       |  1 +
 src/input/mod.rs | 42 ++++++++++++++++++++++++------------------
 src/niri.rs      | 17 +++++++++++++++--
 3 files changed, 40 insertions(+), 20 deletions(-)

diff --git a/Cargo.toml b/Cargo.toml
index 3977fa98..ee9cade9 100644
--- a/Cargo.toml
+++ b/Cargo.toml
@@ -110,6 +110,7 @@ features = [
     "renderer_multi",
     "use_system_lib",
     "wayland_frontend",
+    "virtual_keyboard_not_use_default_handler",
 ]
 
 [dev-dependencies]
diff --git a/src/input/mod.rs b/src/input/mod.rs
index c2667dfc..f29e5535 100644
--- a/src/input/mod.rs
+++ b/src/input/mod.rs
@@ -46,6 +46,7 @@ use crate::niri::{CastTarget, PointerVisibility, State};
 use crate::ui::screenshot_ui::ScreenshotUi;
 use crate::utils::spawning::spawn;
 use crate::utils::{center, get_monotonic_time, ResizeEdge};
+use smithay::input::keyboard::KeyboardHandle;
 
 pub mod backend_ext;
 pub mod move_grab;
@@ -333,12 +334,17 @@ impl State {
             .is_some_and(KeyboardShortcutsInhibitor::is_active)
     }
 
-    fn on_keyboard<I: InputBackend>(&mut self, event: I::KeyboardKeyEvent) {
+    pub fn on_keyboard_real(
+        &mut self,
+        key: Keycode,
+        state: KeyState,
+        time: u32,
+        keyboard: KeyboardHandle<Self>,
+    ) {
         let mod_key = self.backend.mod_key(&self.niri.config.borrow());
 
         let serial = SERIAL_COUNTER.next_serial();
-        let time = Event::time_msec(&event);
-        let pressed = event.state() == KeyState::Pressed;
+        let pressed = state == KeyState::Pressed;
 
         // Stop bind key repeat on any release. This won't work 100% correctly in cases like:
         // 1. Press Mod
@@ -362,22 +368,13 @@ impl State {
         // Accessibility modifier grabs should override XKB state changes (e.g. Caps Lock), so we
         // need to process them before keyboard.input() below.
         #[cfg(feature = "dbus")]
-        if self.a11y_process_key(
-            Duration::from_millis(u64::from(time)),
-            event.key_code(),
-            event.state(),
-        ) {
+        if self.a11y_process_key(Duration::from_millis(u64::from(time)), key, state) {
             return;
         }
 
-        let Some(Some(bind)) = self.niri.seat.get_keyboard().unwrap().input(
-            self,
-            event.key_code(),
-            event.state(),
-            serial,
-            time,
-            |this, mods, keysym| {
-                let key_code = event.key_code();
+        let Some(Some(bind)) =
+            keyboard.input(self, key, state, serial, time, |this, mods, keysym| {
+                let key_code = key;
                 let modified = keysym.modified_sym();
                 let raw = keysym.raw_latin_sym_or_raw_current_sym();
 
@@ -438,8 +435,8 @@ impl State {
                 }
 
                 res
-            },
-        ) else {
+            })
+        else {
             return;
         };
 
@@ -452,6 +449,15 @@ impl State {
         self.start_key_repeat(bind);
     }
 
+    fn on_keyboard<I: InputBackend>(&mut self, event: I::KeyboardKeyEvent) {
+        self.on_keyboard_real(
+            event.key_code(),
+            event.state(),
+            Event::time_msec(&event),
+            self.niri.seat.get_keyboard().unwrap(),
+        );
+    }
+
     fn start_key_repeat(&mut self, bind: Bind) {
         if !bind.repeat {
             return;
diff --git a/src/niri.rs b/src/niri.rs
index 9d847c74..ee532bae 100644
--- a/src/niri.rs
+++ b/src/niri.rs
@@ -18,7 +18,7 @@ use niri_config::{
     WarpMouseToFocusMode, WorkspaceReference, Xkb,
 };
 use smithay::backend::allocator::Fourcc;
-use smithay::backend::input::Keycode;
+use smithay::backend::input::{KeyState, Keycode};
 use smithay::backend::renderer::damage::OutputDamageTracker;
 use smithay::backend::renderer::element::memory::MemoryRenderBufferRenderElement;
 use smithay::backend::renderer::element::surface::{
@@ -45,6 +45,7 @@ use smithay::desktop::{
     find_popup_root_surface, layer_map_for_output, LayerMap, LayerSurface, PopupGrab, PopupManager,
     PopupUngrabStrategy, Space, Window, WindowSurfaceType,
 };
+use smithay::input::keyboard::KeyboardHandle;
 use smithay::input::keyboard::Layout as KeyboardLayout;
 use smithay::input::pointer::{
     CursorIcon, CursorImageStatus, CursorImageSurfaceData, Focus,
@@ -106,7 +107,7 @@ use smithay::wayland::socket::ListeningSocketSource;
 use smithay::wayland::tablet_manager::TabletManagerState;
 use smithay::wayland::text_input::TextInputManagerState;
 use smithay::wayland::viewporter::ViewporterState;
-use smithay::wayland::virtual_keyboard::VirtualKeyboardManagerState;
+use smithay::wayland::virtual_keyboard::{VirtualKeyboardHandler, VirtualKeyboardManagerState};
 use smithay::wayland::xdg_activation::XdgActivationState;
 use smithay::wayland::xdg_foreign::XdgForeignState;
 
@@ -6267,6 +6268,18 @@ fn scale_relocate_crop<E: Element>(
     CropRenderElement::from_element(elem, output_scale, ws_geo)
 }
 
+impl VirtualKeyboardHandler for State {
+    fn on_keyboard_event(
+        &mut self,
+        keycode: Keycode,
+        state: KeyState,
+        time: u32,
+        keyboard: KeyboardHandle<Self>,
+    ) {
+        self.on_keyboard_real(keycode, state, time, keyboard);
+    }
+}
+
 niri_render_elements! {
     OutputRenderElements<R> => {
         Monitor = MonitorRenderElement<R>,
-- 
2.50.1

