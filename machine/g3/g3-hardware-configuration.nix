# Do not modify this file!  It was generated by ‘nixos-generate-config’
# and may be overwritten by future invocations.  Please make changes
# to /etc/nixos/configuration.nix instead.
{
  config,
  lib,
  modulesPath,
  ...
}:

{
  imports = [
    (modulesPath + "/installer/scan/not-detected.nix")
  ];

  boot.initrd.availableKernelModules = [
    "xhci_pci"
    "ahci"
    "nvme"
    "usb_storage"
    "sd_mod"
  ];
  boot.initrd.kernelModules = [ "dm-snapshot" ];
  boot.kernelModules = [ "kvm-intel" ];
  boot.extraModulePackages = [ ];

  fileSystems."/" = {
    device = "/dev/disk/by-uuid/48057729-20c7-4f4d-88d5-180aec0bb34d";
    fsType = "btrfs";
    neededForBoot = true;
  };

  fileSystems."/boot" = {
    neededForBoot = true;
    device = "/dev/disk/by-uuid/C519-C5AE";
    fsType = "vfat";
    options = [
      "fmask=0077"
      "dmask=0077"
    ];
  };
  fileSystems."/" = {
    options = [
      "subvol=root"
      "compress=zstd"
      "flushoncommit"
    ];
  };
  fileSystems."/nix" = {
    neededForBoot = true;
    inherit (config.fileSystems."/") device;
    fsType = "btrfs";
    options = [
      "subvol=nix"
      "compress=zstd"
      "flushoncommit"
    ];
  };
  fileSystems."/persist" = {
    neededForBoot = true;
    inherit (config.fileSystems."/") device;
    fsType = "btrfs";
    options = [
      "subvol=persist"
      "flushoncommit"
    ];
  };

  swapDevices = [
    { device = "/dev/disk/by-uuid/056efdb0-e963-44d7-82ae-3c8a58cab197"; }
  ];

  # Enables DHCP on each ethernet and wireless interface. In case of scripted networking
  # (the default) this is the recommended approach. When using systemd-networkd it's
  # still possible to use this option, but it's recommended to use it in conjunction
  # with explicit per-interface declarations with `networking.interfaces.<interface>.useDHCP`.
  networking.useDHCP = lib.mkDefault true;
  # networking.interfaces.enp3s0.useDHCP = lib.mkDefault true;
  # networking.interfaces.Mihomo.useDHCP = lib.mkDefault true;
  # networking.interfaces.wlo1.useDHCP = lib.mkDefault true;

  nixpkgs.hostPlatform = lib.mkDefault "x86_64-linux";
  hardware.cpu.intel.updateMicrocode = lib.mkDefault config.hardware.enableRedistributableFirmware;
  boot.initrd.systemd.services.rollback = {
    description = "Reset BTRFS root subvolume to empty snapshot";
    # initrd target: root filesystem device is available but not yet mounted. So ensure that this happens in that window.
    wantedBy = [ "initrd.target" ];
    after = [ "initrd-root-device.target" ];
    # ensure this happens before mounting root
    before = [ "sysroot.mount" ];
    # Don't establish any dependencies not defined here
    unitConfig.DefaultDependencies = "no";
    # run once and wait for completion before running subsequent systemd units
    serviceConfig.Type = "oneshot";
    script = ''
      while [ ! -e ${config.fileSystems."/".device} ]; do sleep 1; done
      mkdir /btrfs_tmp
      mount ${config.fileSystems."/".device} /btrfs_tmp
      if [[ -e /btrfs_tmp/root ]]; then
          mkdir -p /btrfs_tmp/old_roots
          timestamp=$(date --date="@$(stat -c %Y /btrfs_tmp/root)" "+%Y-%m-%-d_%H:%M:%S")
          mv /btrfs_tmp/root "/btrfs_tmp/old_roots/$timestamp"
      fi

      delete_subvolume_recursively() {
          IFS=$'\n'
          for i in $(btrfs subvolume list -o "$1" | cut -f 9- -d ' '); do
              delete_subvolume_recursively "/btrfs_tmp/$i"
          done
          btrfs subvolume delete "$1"
      }

      for i in $(find /btrfs_tmp/old_roots/ -maxdepth 1 -mtime +1); do
          delete_subvolume_recursively "$i"
      done

      btrfs subvolume create /btrfs_tmp/root
      umount /btrfs_tmp
    '';
  };
}
